@model BackEnd.Model.Documento
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <span class="modal-title" id="exampleModalLabel">Editar oficio</span>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="contenidoModal">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        int i = 0;
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.idDocumento)

                            <div class="form-group">
                                @Html.LabelFor(model => model.numeroDocumento, "Número de Oficio:", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.numeroDocumento, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.numeroDocumento, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <textarea id="text"></textarea>
                            <script>
                                CKEDITOR.replace("text");
                            </script>
                            <div class="form-group">
                                @Html.LabelFor(model => model.numeroIngreso, "Número de Ingreso:", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.numeroIngreso, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.numeroIngreso, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.idTipo, "Tipo de Documento:", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("idTipo", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.idTipo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.tipoOrigen, "Tipo de origen:", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("tipoOrigen", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.tipoOrigen, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.idOrigen, "Origen:", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("idOrigen", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.idOrigen, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.fecha, "Fecha:", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(model => model.fecha, new { @type = "date", @class = "form-control datepicker"@*, @Value = Model.fecha.ToString("yyyy-MM-dd")*@})
                                    @Html.ValidationMessageFor(model => model.fecha, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.asunto, "Asunto:", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.asunto, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.asunto, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.descripcion, "Descripción:", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.descripcion, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.descripcion, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ubicacion, "Ubicación:", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ubicacion, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ubicacion, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.observacion, "Observación:", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.observacion, 10, 62, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.observacion, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    }

                </div> 

                <input type="file" name="elementName" multiple="multiple" />
                <div class="modal-footer">
                    <a href="#" onclick=
                       "Edit(@Html.DisplayFor(modelItem => modelItem.idDocumento),
                               @Html.DisplayFor(modelItem => modelItem.idTipo), 
                               @Html.DisplayFor(modelItem => modelItem.idOrigen),  
                               @Html.DisplayFor(modelItem => modelItem.tipoOrigen),  
                               @Html.DisplayFor(modelItem => modelItem.idEstado),                                                           
                               @Html.DisplayFor(modelItem => modelItem.idReferencia),
                               '@Html.DisplayFor(modelItem => modelItem.numeroDocumento)',
                               @Html.DisplayFor(modelItem => modelItem.numeroIngreso),
                               '@Html.DisplayFor(modelItem => modelItem.fecha)',
                               '@Html.DisplayFor(modelItem => modelItem.asunto)',
                               '@Html.DisplayFor(modelItem => modelItem.descripcion)',
                               '@Html.DisplayFor(modelItem => modelItem.ubicacion)',
                               '@Html.DisplayFor(modelItem => modelItem.observacion)')"
                       class="btnEdit" data-id="@Html.DisplayFor(modelItem => modelItem.idDocumento)" data-toggle="modal" data-target="#editarModal" id="btnEdit">Editar</a>
                    <button type="submit" class="btn btn-primary" onclick="Edit(@Html.DisplayFor(modelItem => modelItem.idDocumento),
                               @Html.DisplayFor(modelItem => modelItem.idTipo), 
                               @Html.DisplayFor(modelItem => modelItem.idOrigen),  
                               @Html.DisplayFor(modelItem => modelItem.tipoOrigen),  
                               @Html.DisplayFor(modelItem => modelItem.idEstado),                                                           
                               @Html.DisplayFor(modelItem => modelItem.idReferencia),
                               '@Html.DisplayFor(modelItem => modelItem.numeroDocumento)',
                               @Html.DisplayFor(modelItem => modelItem.numeroIngreso),
                               '@Html.DisplayFor(modelItem => modelItem.fecha)',
                               '@Html.DisplayFor(modelItem => modelItem.asunto)',
                               '@Html.DisplayFor(modelItem => modelItem.descripcion)',
                               '@Html.DisplayFor(modelItem => modelItem.ubicacion)',
                               '@Html.DisplayFor(modelItem => modelItem.observacion)')"
                       class="btnEdit" data-id="@Html.DisplayFor(modelItem => modelItem.idDocumento)"><a style="color:white;" href="/Documento/Index">Cerrar</a></button>
                    <button type="button" class="btn btn-primary"><a style="color:white;" href="/Documento/Index">Guardar cambios</a></button>
                </div>
            </div>
        </div>
    </div>
<script type="text/javascript">
    function Edit(idDocumento, idTipo, idOrigen,tipoOrigen,idEstado, idReferencia, numeroDocumento, numeroIngreso, fecha, asunto, descripcion, ubicacion,observacion) {
        var Documentos = {
            idDocumento: idDocumento,
            idTipo : idTipo,
            idOrigen : idOrigen,
            tipoOrigen : tipoOrigen,
            idEstado : idEstado,
            idReferencia : idReferencia,
            numeroDocumento :numeroDocumento,
            numeroIngreso : numeroIngreso,
            fecha : fecha,
            asunto : asunto,
            descripcion : descripcion,
            ubicacion : ubicacion,
            observacion : observacion
        };

        var documento = JSON.stringify(Documentos);
        console.log(documento);
        var url = '@Url.Action("EditarDocumento")';
        $.ajax({
            url: url,
            datatype: "json",
            type: "post",
            data: { 'documento': Documentos },
            contenttype: 'application/json; charset=utf-8',
            async: true,
            success: function (result) {
                console.log(Documentos.numeroDocumento);
                alert('sucess');
                location.reload();
            },
            error: function (xhr) {
                alert('error' + Documentos.numeroIngreso);
                location.reload();
            }
        });
    }


        $(document).ready(function () {  
        //Dropdownlist Selectedchange event  
            $("#tipoOrigen").change(function () {  
                $("#idOrigen").empty();  
            $.ajax({  
                type: 'POST',  
                url: '@Url.Action("GetTipoOrigen")', // we are calling json method  
   
                dataType: 'json',  
   
                data: { id: $("#tipoOrigen").val() },   
   
                success: function (origins) {  
   
                    $.each(origins, function (i, state) {  
                        $("#idOrigen").append('<option value="' + origins.Value + '">' +    
                         state.Text + '</option>');                                                                                                     
                    });  
                },  
                error: function (ex) {  
                    alert('Failed to retrieve states.' + ex);  
                }  
            });  
            return false;  
        })  
    });  
    $(document).ready(function () {  
        $("#idTipo").change(function () {
            var a = $("#idTipo Option:Selected").text();
            $("Oficio").text(a);
    })  
});  
</script>